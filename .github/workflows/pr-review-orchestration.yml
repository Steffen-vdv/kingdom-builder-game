name: PR Review Orchestration

on:
  pull_request:
    types:
      - opened
      - reopened
  check_run:
    types:
      - completed

permissions:
  contents: read
  checks: read
  pull-requests: write
  issues: write

jobs:
  initialize-iteration-marker:
    name: Ensure PR metadata markers
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Ensure iteration marker is present
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const prNumber = context.payload.pull_request.number;
            const action = context.payload.action;

            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber
            });

            const body = pr.body ?? '';
            const markerPattern = /<!--\s*REVIEW_ITERATION:\s*(\d+)\s*-->/i;
            const hasMarker = markerPattern.test(body);
            const shouldReset = action === 'reopened';
            let nextBody = body;

            if (!hasMarker) {
              const suffix = body.trim().length === 0 ? '' : '\n\n';
              nextBody = `${body}${suffix}<!-- REVIEW_ITERATION: 0 -->`;
            } else if (shouldReset) {
              nextBody = body.replace(
                markerPattern,
                '<!-- REVIEW_ITERATION: 0 -->'
              );
            }

            if (nextBody !== body) {
              await github.rest.pulls.update({
                owner,
                repo,
                pull_number: prNumber,
                body: nextBody
              });
              core.info('Updated PR body with review iteration marker.');
            }

            if (shouldReset) {
              const labelsToRemove = [
                'under-review',
                'awaiting-fixes',
                'max-iterations-reached'
              ];

              for (const label of labelsToRemove) {
                try {
                  await github.rest.issues.removeLabel({
                    owner,
                    repo,
                    issue_number: prNumber,
                    name: label
                  });
                } catch (error) {
                  if (error.status !== 404) {
                    throw error;
                  }
                }
              }
            }

  orchestrate-fix-cycle:
    name: Advance review/fix loop
    if: |
      github.event_name == 'check_run' &&
      github.event.check_run.app.slug == 'coderabbitai' &&
      github.event.check_run.status == 'completed'
    runs-on: ubuntu-latest
    steps:
      - name: Process CodeRabbit actionable feedback
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const checkRun = context.payload.check_run;
            const prInfo = checkRun.pull_requests?.[0];

            if (!prInfo) {
              core.info('No pull request associated with check run.');
              return;
            }

            const prNumber = prInfo.number;
            const conclusion = checkRun.conclusion ?? '';
            const ignoredConclusions = new Set([
              'cancelled',
              'failure',
              'skipped',
              'timed_out'
            ]);

            if (ignoredConclusions.has(conclusion)) {
              core.info(`Check run concluded with ${conclusion}. Skipping.`);
              return;
            }

            const { data: comments } = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: prNumber,
              per_page: 100
            });

            const completedAt = checkRun.completed_at
              ? new Date(checkRun.completed_at).getTime()
              : Date.now();
            const detectionWindow = 2 * 60 * 60 * 1000;

            const coderabbitComments = comments
              .filter((comment) => {
                return comment.user?.login === 'coderabbitai[bot]';
              })
              .sort((a, b) => {
                return new Date(b.created_at) - new Date(a.created_at);
              });

            const recentCoderabbitComment = coderabbitComments.find(
              (comment) => {
                const createdAt = new Date(comment.created_at).getTime();
                return Math.abs(completedAt - createdAt) <= detectionWindow;
              }
            );
            const commentBody = recentCoderabbitComment?.body ?? '';
            const recentCommentAt = recentCoderabbitComment
              ? new Date(recentCoderabbitComment.created_at).getTime()
              : 0;
            const { data: reviewComments } =
              await github.rest.pulls.listReviewComments({
                owner,
                repo,
                pull_number: prNumber,
                per_page: 100
              });

            const hasRecentInline = reviewComments.some((comment) => {
              if (comment.user?.login !== 'coderabbitai[bot]') {
                return false;
              }

              const createdAt = new Date(comment.created_at).getTime();
              if (recentCoderabbitComment) {
                return createdAt >= recentCommentAt;
              }

              return Math.abs(completedAt - createdAt) <= detectionWindow;
            });

            const actionablePatterns = [
              /###\s*⚠️/u,
              /###\s*🚫/u,
              /Actionable comments posted/i,
              /Actionable feedback/i,
              /issues? found/i
            ];

            const hasPatternMatch = actionablePatterns.some((pattern) => {
              return pattern.test(commentBody);
            });

            const summaryText = [
              checkRun.output?.summary ?? '',
              checkRun.output?.text ?? ''
            ];

            const hasActionableSummary = summaryText.some((section) => {
              return actionablePatterns.some((pattern) => {
                return pattern.test(section);
              });
            });

            const hasActionableFeedback =
              hasRecentInline || hasPatternMatch || hasActionableSummary;

            if (!hasActionableFeedback) {
              core.info('CodeRabbit reported no actionable feedback.');
              return;
            }

            const labelDefinitions = [
              {
                name: 'under-review',
                color: '1d76db',
                description: 'Automated review cycle in progress'
              },
              {
                name: 'awaiting-fixes',
                color: 'fbca04',
                description: 'Waiting for Codex fixes after CodeRabbit review'
              },
              {
                name: 'max-iterations-reached',
                color: 'd93f0b',
                description: 'Automated review/fix cycle capped at five rounds'
              }
            ];

            for (const label of labelDefinitions) {
              try {
                await github.rest.issues.getLabel({
                  owner,
                  repo,
                  name: label.name
                });
              } catch (error) {
                if (error.status === 404) {
                  core.info(`Creating missing label: ${label.name}`);
                  await github.rest.issues.createLabel({
                    owner,
                    repo,
                    ...label
                  });
                } else {
                  throw error;
                }
              }
            }

            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber
            });

            const markerPattern = /<!--\s*REVIEW_ITERATION:\s*(\d+)\s*-->/i;
            const body = pr.body ?? '';
            const match = body.match(markerPattern);
            let currentIteration = match ? Number.parseInt(match[1], 10) : 0;

            if (Number.isNaN(currentIteration)) {
              core.warning('Iteration marker invalid. Treating as 0.');
              currentIteration = 0;
            }

            const maxIterations = 5;

            const { data: issue } = await github.rest.issues.get({
              owner,
              repo,
              issue_number: prNumber
            });

            let hasMaxIterationLabel = issue.labels.some((label) => {
              if (typeof label === 'string') {
                return label === 'max-iterations-reached';
              }

              return label.name === 'max-iterations-reached';
            });

            const finalizeState = async () => {
              try {
                await github.rest.issues.removeLabel({
                  owner,
                  repo,
                  issue_number: prNumber,
                  name: 'under-review'
                });
              } catch (error) {
                if (error.status !== 404) {
                  throw error;
                }
              }

              try {
                await github.rest.issues.removeLabel({
                  owner,
                  repo,
                  issue_number: prNumber,
                  name: 'awaiting-fixes'
                });
              } catch (error) {
                if (error.status !== 404) {
                  throw error;
                }
              }

              if (!hasMaxIterationLabel) {
                const escalationTarget =
                  pr.user?.login ? `@${pr.user.login}` : `@${owner}`;
                const maxIterationMessage = [
                  `${escalationTarget} The automated review-fix cycle has reached the`,
                  'maximum of 5 iterations.',
                  'Manual intervention is required.',
                  'The PR still has unresolved issues from CodeRabbit',
                  'and/or Codex.'
                ].join(' ');

                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number: prNumber,
                  labels: ['max-iterations-reached']
                });

                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: prNumber,
                  body: maxIterationMessage
                });

                hasMaxIterationLabel = true;
              }
            };

            if (currentIteration >= maxIterations || hasMaxIterationLabel) {
              core.info('Max iteration threshold already reached.');
              await finalizeState();
              return;
            }

            const nextIteration = currentIteration + 1;
            const hitIterationCap = nextIteration >= maxIterations;
            const targetIteration = hitIterationCap
              ? maxIterations
              : nextIteration;
            const spacing = body.trim().length === 0 ? '' : '\n\n';
            const marker = `<!-- REVIEW_ITERATION: ${targetIteration} -->`;
            const nextBody = match
              ? body.replace(markerPattern, marker)
              : `${body}${spacing}${marker}`;

            if (nextBody !== body) {
              await github.rest.pulls.update({
                owner,
                repo,
                pull_number: prNumber,
                body: nextBody
              });
            }

            if (hitIterationCap) {
              core.info('Iteration cap reached on this cycle. Finalising.');
              await finalizeState();
              return;
            }

            try {
              await github.rest.issues.removeLabel({
                owner,
                repo,
                issue_number: prNumber,
                name: 'under-review'
              });
            } catch (error) {
              if (error.status !== 404) {
                throw error;
              }
            }

            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: prNumber,
              labels: ['awaiting-fixes']
            });

            try {
              await github.rest.issues.removeLabel({
                owner,
                repo,
                issue_number: prNumber,
                name: 'max-iterations-reached'
              });
            } catch (error) {
              if (error.status !== 404) {
                throw error;
              }
            }

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: prNumber,
              body: '@codex fix'
            });
