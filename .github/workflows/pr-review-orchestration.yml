name: PR Review Automation (Orchestration)

on:
  issue_comment:
    types:
      - created
  pull_request:
    types:
      - opened
      - reopened

jobs:
  initialize-metadata:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REPO: ${{ github.repository }}
      PR_NUMBER: ${{ github.event.pull_request.number }}
      ACTION: ${{ github.event.action }}
    steps:
      - name: Ensure workflow labels exist
        run: |
          create_label() {
            name="$1"
            color="$2"
            description="$3"
            gh label create "$name" --color "$color" --description "$description" \
              >/dev/null 2>&1 || true
          }

          create_label "under-review" "1d76db" \
            "Automated reviewers are currently evaluating the pull request."
          create_label "awaiting-fixes" "fbca04" \
            "CodeRabbit reported actionable items awaiting Codex fixes."
          create_label "max-iterations-reached" "b60205" \
            "Automated review loop hit the iteration limit and needs attention."

      - name: Reset iteration tracker
        env:
          COMMENT_TEMPLATE: '<!-- REVIEW_ITERATION: 0 -->'
        run: |
          body=$(gh pr view "$PR_NUMBER" --json body --jq '.body // ""')
          trimmed=$(printf '%s' "$body" | sed 's/[[:space:]]*$//')
          if echo "$trimmed" | grep -q '<!--[[:space:]]*REVIEW_ITERATION:'; then
            new_body=$(printf '%s' "$trimmed" | \
              sed -E 's/<!--[[:space:]]*REVIEW_ITERATION:[[:space:]]*[0-9]+[[:space:]]*-->/<!-- REVIEW_ITERATION: 0 -->/')
          else
            if [ -n "$trimmed" ]; then
              new_body="$trimmed\n\n$COMMENT_TEMPLATE"
            else
              new_body="$COMMENT_TEMPLATE"
            fi
          fi

          printf '%s' "$new_body" > body.txt
          gh pr edit "$PR_NUMBER" --body-file body.txt

      - name: Clear workflow labels on reopen
        if: env.ACTION == 'reopened'
        run: |
          gh api "/repos/$REPO/issues/$PR_NUMBER/labels/under-review" \
            --method DELETE >/dev/null 2>&1 || true
          gh api "/repos/$REPO/issues/$PR_NUMBER/labels/awaiting-fixes" \
            --method DELETE >/dev/null 2>&1 || true
          gh api "/repos/$REPO/issues/$PR_NUMBER/labels/max-iterations-reached" \
            --method DELETE >/dev/null 2>&1 || true

  process-review-comment:
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request != null
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REPO: ${{ github.repository }}
      COMMENT_AUTHOR: ${{ github.event.comment.user.login }}
      COMMENT_BODY: ${{ github.event.comment.body }}
      PR_NUMBER: ${{ github.event.issue.number }}
    steps:
      - name: Skip non-CodeRabbit actionable comments
        id: filter
        run: |
          if [ "$COMMENT_AUTHOR" != 'coderabbitai[bot]' ]; then
            echo "trigger=false" >>"$GITHUB_OUTPUT"
            exit 0
          fi

          body_lc=$(printf '%s' "$COMMENT_BODY" | tr '[:upper:]' '[:lower:]')
          if echo "$body_lc" | grep -q 'actionable comments posted'; then
            echo "trigger=true" >>"$GITHUB_OUTPUT"
          elif echo "$body_lc" | grep -q 'actionable comment posted'; then
            echo "trigger=true" >>"$GITHUB_OUTPUT"
          elif echo "$body_lc" | grep -q 'actionable feedback'; then
            echo "trigger=true" >>"$GITHUB_OUTPUT"
          else
            echo "trigger=false" >>"$GITHUB_OUTPUT"
          fi

      - name: Gather pull request state
        if: steps.filter.outputs.trigger == 'true'
        id: state
        run: |
          body=$(gh pr view "$PR_NUMBER" --json body --jq '.body // ""')
          labels=$(gh pr view "$PR_NUMBER" --json labels --jq '.[].name')

          {
            echo "body<<'EOF'"
            printf '%s\n' "$body"
            echo 'EOF'
          } >>"$GITHUB_OUTPUT"

          {
            echo "labels<<'EOF'"
            printf '%s\n' "$labels"
            echo 'EOF'
          } >>"$GITHUB_OUTPUT"

      - name: Evaluate iteration state
        if: steps.filter.outputs.trigger == 'true'
        id: evaluation
        env:
          PR_BODY: ${{ steps.state.outputs.body }}
          PR_LABELS: ${{ steps.state.outputs.labels }}
        run: |
          python <<'PY'
          import os
          import re

          original_body = os.environ.get('PR_BODY', '')
          labels_raw = os.environ.get('PR_LABELS', '')
          label_list = [
            label.strip()
            for label in labels_raw.splitlines()
            if label.strip()
          ]
          label_set = set(label_list)
          max_iterations = 5
          pattern = r'<!--\s*REVIEW_ITERATION:\s*(\d+)\s*-->'

          body = original_body.rstrip()
          match = re.search(pattern, original_body)
          if not match:
            if body:
              working_body = f"{body}\n\n<!-- REVIEW_ITERATION: 0 -->"
            else:
              working_body = "<!-- REVIEW_ITERATION: 0 -->"
            match = re.search(pattern, working_body)
            if match:
              current_iteration = int(match.group(1))
            else:
              current_iteration = 0
            body_to_use = working_body
          else:
            current_iteration = int(match.group(1))
            body_to_use = original_body

          if current_iteration >= max_iterations:
            action = 'maxed'
            new_iteration = current_iteration
          else:
            action = 'increment'
            new_iteration = current_iteration + 1

          updated_body = re.sub(
            pattern,
            f'<!-- REVIEW_ITERATION: {new_iteration} -->',
            body_to_use,
          )
          needs_update = (
            'true' if updated_body != original_body else 'false'
          )

          print(f"action={action}")
          print(f"current={current_iteration}")
          print(f"new_iteration={new_iteration}")
          print(f"needs_update={needs_update}")
          print(
            f"has_max_label={'true' if 'max-iterations-reached' in label_set else 'false'}"
          )
          print("updated_body<<'EOF'")
          print(updated_body)
          print('EOF')
          PY

      - name: Update pull request body
        if: steps.filter.outputs.trigger == 'true' && steps.evaluation.outputs.needs_update == 'true'
        run: |
          printf '%s' "${{ steps.evaluation.outputs.updated_body }}" > body.txt
          gh pr edit "$PR_NUMBER" --body-file body.txt

      - name: Transition workflow labels after review
        if: steps.filter.outputs.trigger == 'true'
        run: |
          if [ "${{ steps.evaluation.outputs.action }}" = 'maxed' ]; then
            gh api "/repos/$REPO/issues/$PR_NUMBER/labels/under-review" \
              --method DELETE >/dev/null 2>&1 || true
            gh api "/repos/$REPO/issues/$PR_NUMBER/labels/awaiting-fixes" \
              --method DELETE >/dev/null 2>&1 || true
            gh api --method POST \
              "/repos/$REPO/issues/$PR_NUMBER/labels" \
              -f labels[]='max-iterations-reached' >/dev/null || true
            if [ "${{ steps.evaluation.outputs.has_max_label }}" != 'true' ]; then
              cat <<'EOM' > max-iteration-comment.txt
              @Steffen-vdv The automated review-fix cycle has reached the maximum of 5
              iterations. Manual intervention required. The PR still has unresolved
              issues from CodeRabbit and/or Codex.
              EOM
              gh pr comment "$PR_NUMBER" \
                --body "$(cat max-iteration-comment.txt)"
              rm -f max-iteration-comment.txt
            fi
          else
            gh api "/repos/$REPO/issues/$PR_NUMBER/labels/under-review" \
              --method DELETE >/dev/null 2>&1 || true
            gh api "/repos/$REPO/issues/$PR_NUMBER/labels/max-iterations-reached" \
              --method DELETE >/dev/null 2>&1 || true
            gh api --method POST \
              "/repos/$REPO/issues/$PR_NUMBER/labels" \
              -f labels[]='awaiting-fixes' >/dev/null
            gh pr comment "$PR_NUMBER" --body '@codex fix'
          fi
