name: PR Review Orchestration

on:
  issue_comment:
    types:
      - created
  pull_request:
    types:
      - opened
      - reopened
      - edited

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  initialize-metadata:
    if: github.event_name == 'pull_request'
    name: Ensure PR metadata is initialized
    runs-on: ubuntu-latest
    steps:
      - name: Ensure workflow labels exist
        uses: actions/github-script@v7
        with:
          script: |
            const labels = [
              {
                name: 'under-review',
                color: '0b5cff',
                description: 'Reviews are currently underway.'
              },
              {
                name: 'awaiting-fixes',
                color: 'd93f0b',
                description: 'Waiting on Codex fixes for CodeRabbit feedback.'
              },
              {
                name: 'max-iterations-reached',
                color: '6f42c1',
                description: 'Automated review-fix cycle exhausted.'
              }
            ];
            for (const label of labels) {
              try {
                await github.rest.issues.getLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: label.name
                });
              } catch (error) {
                if (error.status === 404) {
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: label.name,
                    color: label.color,
                    description: label.description
                  });
                } else {
                  throw error;
                }
              }
            }

      - name: Initialize or reset iteration counter
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const action = context.payload.action;
            const marker = /<!--\s*REVIEW_ITERATION:\s*(\d+)\s*-->/;
            const body = context.payload.pull_request.body ?? '';
            let updatedBody = body;
            if (!marker.test(body)) {
              const spacer = body.trim().length ? '\n\n' : '';
              updatedBody = `${body}${spacer}<!-- REVIEW_ITERATION: 0 -->`;
            } else if (action === 'opened' || action === 'reopened') {
              updatedBody = body.replace(
                marker,
                '<!-- REVIEW_ITERATION: 0 -->'
              );
            }
            if (updatedBody !== body) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                body: updatedBody
              });
            }
            if (action === 'reopened') {
              const labelsToRemove = [
                'under-review',
                'awaiting-fixes',
                'max-iterations-reached'
              ];
              for (const name of labelsToRemove) {
                try {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    name
                  });
                } catch (error) {
                  if (error.status !== 404) {
                    throw error;
                  }
                }
              }
            }

  handle-coderabbit-feedback:
    if: |
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request != null &&
      github.event.comment.user.login == 'coderabbitai[bot]' &&
      (
        contains(github.event.comment.body, 'Actionable comments') ||
        contains(github.event.comment.body, 'actionable comments')
      ) &&
      !contains(github.event.comment.body, 'No actionable comments') &&
      !contains(github.event.comment.body, 'no actionable comments')
    name: Process CodeRabbit actionable feedback
    runs-on: ubuntu-latest
    steps:
      - name: Ensure workflow labels exist
        uses: actions/github-script@v7
        with:
          script: |
            const labels = [
              {
                name: 'under-review',
                color: '0b5cff',
                description: 'Reviews are currently underway.'
              },
              {
                name: 'awaiting-fixes',
                color: 'd93f0b',
                description: 'Waiting on Codex fixes for CodeRabbit feedback.'
              },
              {
                name: 'max-iterations-reached',
                color: '6f42c1',
                description: 'Automated review-fix cycle exhausted.'
              }
            ];
            for (const label of labels) {
              try {
                await github.rest.issues.getLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: label.name
                });
              } catch (error) {
                if (error.status === 404) {
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: label.name,
                    color: label.color,
                    description: label.description
                  });
                } else {
                  throw error;
                }
              }
            }

      - name: Respond to actionable feedback
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            const labels = new Set(
              issue.labels.map((label) => label.name)
            );
            if (labels.has('max-iterations-reached')) {
              core.info('Max iterations already reached; skipping.');
              return;
            }
            if (!labels.has('under-review')) {
              core.info('Ignoring actionable feedback because the PR is not ' +
                'marked as under-review.');
              return;
            }
            const marker = /<!--\s*REVIEW_ITERATION:\s*(\d+)\s*-->/;
            const body = pullRequest.body ?? '';
            const match = marker.exec(body);
            let currentIteration = match ? parseInt(match[1], 10) : 0;
            if (Number.isNaN(currentIteration)) {
              currentIteration = 0;
            }
            if (currentIteration >= 5) {
              const escalation = [
                '@Steffen-vdv The automated review-fix cycle has reached ',
                'the maximum of 5 iterations. Manual intervention required. ',
                'The PR still has unresolved issues from CodeRabbit ',
                'and/or Codex.'
              ].join('');
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                name: 'under-review'
              }).catch((error) => {
                if (error.status !== 404) throw error;
              });
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                name: 'awaiting-fixes'
              }).catch((error) => {
                if (error.status !== 404) throw error;
              });
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: ['max-iterations-reached']
              });
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: escalation
              });
              return;
            }
            const nextIteration = currentIteration + 1;
            const spacer = body.trim().length ? '\n\n' : '';
            let updatedBody;
            if (marker.test(body)) {
              updatedBody = body.replace(
                marker,
                `<!-- REVIEW_ITERATION: ${nextIteration} -->`
              );
            } else {
              updatedBody = [
                body,
                spacer,
                `<!-- REVIEW_ITERATION: ${nextIteration} -->`
              ].join('');
            }
            if (updatedBody !== body) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                body: updatedBody
              });
            }
            await github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              name: 'under-review'
            }).catch((error) => {
              if (error.status !== 404) {
                throw error;
              }
            });
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              labels: ['awaiting-fixes']
            });
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: '@codex fix'
            });
