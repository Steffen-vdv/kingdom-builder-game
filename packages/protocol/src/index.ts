export * as session from './session';
export * as actions from './actions';

export { Registry } from './registry';
export type { StepDef, PhaseDef } from './phases';
export type { EffectDef } from './effects';
export {
	resourceV2BoundsSchema,
	resourceV2DefinitionSchema,
	resourceV2DefinitionsPayloadSchema,
	resourceV2DisplayMetadataSchema,
	resourceV2GlobalActionCostSchema,
	resourceV2GroupDefinitionSchema,
	resourceV2GroupMetadataSchema,
	resourceV2GroupParentSchema,
	resourceV2LimitedParentFlagSetSchema,
	resourceV2ReconciliationSchema,
	resourceV2TierStepSchema,
	resourceV2TierTrackSchema,
} from './resourceV2/definitions';
export type {
	ResourceV2BoundsConfig,
	ResourceV2DefinitionConfig,
	ResourceV2DefinitionsPayloadConfig,
	ResourceV2DisplayMetadataConfig,
	ResourceV2GlobalActionCostConfig,
	ResourceV2GroupDefinitionConfig,
	ResourceV2GroupMetadataConfig,
	ResourceV2GroupParentConfig,
	ResourceV2LimitedParentFlagSetConfig,
	ResourceV2ReconciliationStrategyConfig,
	ResourceV2TierStepConfig,
	ResourceV2TierTrackConfig,
} from './resourceV2/definitions';
export {
	applyParamsToEffects,
	coerceActionEffectGroupChoices,
	resolveActionEffects,
} from './effects/resolve';
export type {
	ActionEffectGroupChoice,
	ActionEffectGroupChoiceMap,
	ResolvedActionEffectGroup,
	ResolvedActionEffectGroupOption,
	ResolvedActionEffectGroupStep,
	ResolvedActionEffectStep,
	ResolvedActionEffects,
} from './effects/resolve';
export type { EvaluatorDef } from './evaluators';
export type {
	AttackTarget,
	ResourceAttackTarget,
	StatAttackTarget,
	BuildingAttackTarget,
	AttackCalcOptions,
	AttackLogOwner,
	AttackPowerLog,
	AttackNumericTargetLog,
	ResourceAttackEvaluationTargetLog,
	StatAttackEvaluationTargetLog,
	BuildingAttackEvaluationTargetLog,
	AttackEvaluationTargetLog,
	AttackEvaluationLog,
	AttackResourceDiff,
	AttackStatDiff,
	AttackPlayerDiff,
	AttackOnDamageLogEntry,
	AttackLog,
} from './effects/attack';
export {
	TRANSFER_AMOUNT_EVALUATION_ID,
	TRANSFER_AMOUNT_EVALUATION_TARGET,
	TRANSFER_AMOUNT_EVALUATION_TYPE,
	TRANSFER_PCT_EVALUATION_ID,
	TRANSFER_PCT_EVALUATION_TARGET,
	TRANSFER_PCT_EVALUATION_TYPE,
} from './effects/resource_transfer';
export {
	requirementSchema,
	effectSchema,
	actionCategorySchema,
	actionEffectGroupSchema,
	actionEffectSchema,
	actionSchema,
	buildingSchema,
	developmentSchema,
	populationSchema,
	startConfigSchema,
	gameConfigSchema,
	validateGameConfig,
	phaseStepSchema,
	phaseSchema,
} from './config/schema';
export type {
	RequirementConfig,
	EffectConfig,
	ActionCategoryConfig,
	ActionEffectGroup,
	ActionEffectGroupOption,
	ActionEffect,
	ActionConfig,
	BuildingConfig,
	DevelopmentConfig,
	PopulationConfig,
	PlayerStartConfig,
	StartConfig,
	StartModeConfig,
	StartModesConfig,
	ResourceV2Config,
	GameConfig,
	PhaseStepConfig,
	PhaseConfig,
} from './config/schema';
export type {
	PhaseSkipConfig,
	PhaseSkipStep,
	PassiveMetadata,
	PassiveRemovalMetadata,
	PassiveSourceMetadata,
	TierRange,
	TierPassivePreview,
	TierPassiveTextTokens,
	TierDisplayMetadata,
	TierEffect,
	HappinessTierDefinition,
	WinConditionOutcome,
	WinConditionDefinition,
	WinConditionDisplay,
	WinConditionTrigger,
	WinConditionResult,
	CorePhaseIds,
	RuleSet,
} from './services';
export type {
	SessionPlayerId,
	SessionStatSourceLink,
	SessionStatSourceMeta,
	SessionStatSourceContribution,
	SessionLandSnapshot,
	SessionPassiveSummary,
	SessionPlayerStateSnapshot,
	SessionGameConclusionSnapshot,
	SessionGameSnapshot,
	SessionAdvanceSkipSourceSnapshot,
	SessionAdvanceSkipSnapshot,
	SessionPhaseStepDefinition,
	SessionPhaseDefinition,
	SessionAdvanceResult,
	PlayerSnapshotDeltaBucket,
	SimulateUpcomingPhasesIds,
	SimulateUpcomingPhasesOptions,
	SimulateUpcomingPhasesResult,
	SessionPassiveRecordSnapshot,
	SessionRuleSnapshot,
	SessionRecentResourceGain,
	SessionSnapshot,
	SessionEffectLogMap,
	SessionPassiveEvaluationModifierMap,
	SessionMetadataDescriptor,
	SessionMetadataFormat,
	SessionOverviewTokenCategoryName,
	SessionOverviewTokenMap,
	SessionOverviewHero,
	SessionOverviewListItem,
	SessionOverviewParagraphSection,
	SessionOverviewListSection,
	SessionOverviewSection,
	SessionOverviewMetadata,
	SessionPhaseMetadata,
	SessionPhaseStepMetadata,
	SessionTriggerMetadata,
	SessionSnapshotMetadata,
	SessionMetadataSnapshot,
	SessionActionDefinitionSummary,
	SessionActionCostMap,
	SessionRequirementFailure,
	SessionActionRequirementList,
} from './session';
export type {
	SessionIdentifier,
	SessionPlayerNameMap,
	SessionCreateRequest,
	SessionCreateResponse,
	SessionStateResponse,
	SessionAdvanceRequest,
	SessionAdvanceResponse,
	SessionSetDevModeRequest,
	SessionSetDevModeResponse,
	SessionRegistriesPayload,
	SessionResourceRegistryPayload,
	SerializedRegistry,
	SessionActionCategoryRegistry,
	SessionUpdatePlayerNameRequest,
	SessionUpdatePlayerNameResponse,
	SessionActionCostRequest,
	SessionActionCostResponse,
	SessionActionRequirementRequest,
	SessionActionRequirementResponse,
	SessionActionOptionsRequest,
	SessionActionOptionsResponse,
	SessionRunAiAction,
	SessionRunAiRequest,
	SessionRunAiResponse,
	SessionSimulateRequest,
	SessionSimulateResponse,
	SessionRuntimeConfigResponse,
	SessionMetadataSnapshotResponse,
} from './session/contracts';
export type { SessionGateway } from './session/gateway';
export type {
	SessionResourceValueSnapshotBounds,
	SessionResourceValueSnapshot,
	SessionResourceValueSnapshotMap,
	SessionResourceValueDelta,
	SessionResourceValueDeltaMap,
	SessionResourceGlobalCostReference,
	SessionResourceValueDescriptor,
	SessionResourceValueDescriptorRecord,
	SessionResourceGroupParentDescriptor,
	SessionResourceGroupDescriptor,
	SessionResourceGroupDescriptorRecord,
	SessionResourceTierStepDescriptor,
	SessionResourceTierTrackDescriptor,
	SessionResourceTierStatus,
	SessionResourceTierStatusRecord,
	SessionResourceValueMetadata,
	SessionResourceRecentGain,
	SessionResourceDisplayValue,
	SessionResourceDisplayGroup,
	SessionResourceDisplayPlan,
} from './session';
export {
	createResourceDisplayPlan,
	extractGroupChildren,
	createValueDescriptor,
} from './session';
export type {
	ActionEffectChoice,
	ActionChoiceMap,
	ActionParametersPayload,
	ActionExecuteRequest,
	ActionTraceLandSnapshot,
	ActionPlayerSnapshot,
	ActionTrace,
	ActionExecuteSuccessResponse,
	ActionExecuteErrorResponse,
	ActionExecuteResponse,
} from './actions/contracts';
export {
	sessionIdSchema,
	sessionPlayerNameMapSchema,
	sessionCreateRequestSchema,
	sessionCreateResponseSchema,
	sessionStateResponseSchema,
	sessionAdvanceRequestSchema,
	sessionAdvanceResponseSchema,
	sessionSetDevModeRequestSchema,
	sessionSetDevModeResponseSchema,
	sessionUpdatePlayerNameRequestSchema,
	sessionUpdatePlayerNameResponseSchema,
	sessionActionCostRequestSchema,
	sessionActionCostResponseSchema,
	sessionActionRequirementRequestSchema,
	sessionActionRequirementResponseSchema,
	sessionActionOptionsRequestSchema,
	sessionActionOptionsResponseSchema,
	sessionRunAiRequestSchema,
	sessionRunAiResponseSchema,
	sessionSimulateRequestSchema,
	sessionSimulateResponseSchema,
	sessionRegistriesSchema,
	runtimeConfigResponseSchema,
	sessionMetadataSnapshotSchema,
	sessionMetadataSnapshotResponseSchema,
} from './config/session_contracts';
export {
	actionEffectChoiceSchema,
	actionChoiceMapSchema,
	actionParametersSchema,
	actionTraceLandSnapshotSchema,
	actionPlayerSnapshotSchema,
	actionTraceSchema,
	actionRequirementFailureSchema,
	actionExecuteRequestSchema,
	actionExecuteSuccessResponseSchema,
	actionExecuteErrorResponseSchema,
	actionExecuteResponseSchema,
} from './config/action_contracts';
