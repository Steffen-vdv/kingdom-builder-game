module.exports = {
	root: true,
	parser: '@typescript-eslint/parser',
	parserOptions: {
		project: ['./tsconfig.eslint.json'],
		ecmaVersion: 'latest',
		sourceType: 'module',
		extraFileExtensions: ['.md'],
	},
	env: {
		browser: true,
		node: true,
		es2022: true,
	},
	plugins: ['@typescript-eslint', 'unused-imports', 'import', 'markdown'],
	extends: [
		'eslint:recommended',
		'plugin:@typescript-eslint/recommended',
		'plugin:@typescript-eslint/recommended-type-checked',
		'plugin:import/typescript',
	],
	rules: {
		'no-unused-vars': 'off',
		'@typescript-eslint/no-unused-vars': [
			'error',
			{ argsIgnorePattern: '^_', varsIgnorePattern: '^_' },
		],
		'unused-imports/no-unused-imports': 'error',
		'unused-imports/no-unused-vars': [
			'error',
			{
				vars: 'all',
				varsIgnorePattern: '^_',
				args: 'after-used',
				argsIgnorePattern: '^_',
			},
		],
		curly: ['error', 'all'],
		'max-len': [
			'error',
			{
				code: 80,
				ignoreUrls: true,
				ignoreStrings: true,
				ignoreTemplateLiterals: true,
				ignoreRegExpLiterals: true,
				tabWidth: 1,
			},
		],
		'max-lines': [
			'error',
			{
				max: 350,
				skipBlankLines: true,
				skipComments: true,
			},
		],
		'no-max-lines-override': 'error',
		'id-length': [
			'error',
			{
				min: 3,
				properties: 'never',
				exceptions: [
					'_',
					'id',
					'to',
					'up',
					'fn',
					'cb',
					'op',
					'db',
					'ui',
					'fc',
					'AP',
					'HP',
					'xp',
					'ok',
					'ai',
					'n',
					'r',
					'it',
					'x',
					'y',
					'z',
					'i',
					'j',
					'a',
					'b',
					'c',
					'd',
					'e',
					'f',
					'fs',
					'l',
					's',
					't',
				],
			},
		],
		'@typescript-eslint/no-explicit-any': 'error',
		'@typescript-eslint/consistent-type-imports': [
			'error',
			{ prefer: 'type-imports', fixStyle: 'separate-type-imports' },
		],
		'@typescript-eslint/ban-ts-comment': [
			'error',
			{ 'ts-ignore': true, 'ts-nocheck': true },
		],
		'import/no-duplicates': 'error',
	},
	overrides: [
		{
			files: ['**/*.test.ts', '**/*.test.tsx'],
			rules: {
				'max-lines': 'off',
			},
		},
		{
			files: [
				'packages/**/tests/**/*.ts',
				'packages/**/tests/**/*.tsx',
				'tests/**/*.ts',
				'tests/**/*.tsx',
			],
			rules: {
				'@typescript-eslint/no-unsafe-assignment': 'off',
				'@typescript-eslint/no-unsafe-member-access': 'off',
				'@typescript-eslint/no-unsafe-argument': 'off',
				'@typescript-eslint/no-unsafe-return': 'off',
				'@typescript-eslint/no-unsafe-call': 'off',
				'@typescript-eslint/no-unnecessary-type-assertion': 'off',
			},
		},
		{
			files: [
				'packages/engine/tests/**/*.ts',
				'packages/engine/tests/**/*.tsx',
				'tests/**/*.ts',
				'tests/**/*.tsx',
			],
			rules: {
				'check-test-content': 'error',
			},
		},
		{
			files: ['packages/web/tests/**/*.ts', 'packages/web/tests/**/*.tsx'],
			// Prevents web tests from importing the contents package so
			// fixtures/selectors stay aligned with the domain-migration
			// guidance in docs/domain-migration/content-metadata-inventory.md.
			rules: {
				'no-restricted-imports': [
					'error',
					{
						paths: [
							{
								name: '@kingdom-builder/contents',
								message:
									'Web tests must rely on selectors or synthetic ' +
									'fixtures instead of importing contents directly.',
							},
						],
					},
				],
			},
		},
		{
			files: ['**/*.md'],
			processor: 'markdown/markdown',
		},
		{
			files: ['**/*.md/*.ts', '**/*.md/*.tsx'],
			parserOptions: {
				project: null,
			},
			rules: {
				'max-len': 'off',
				'max-lines': 'off',
			},
		},
		{
			files: ['scripts/**/*.js', 'scripts/**/*.cjs'],
			parserOptions: {
				project: ['./tsconfig.eslint.json'],
				tsconfigRootDir: __dirname,
			},
			rules: {
				'@typescript-eslint/await-thenable': 'off',
				'@typescript-eslint/no-floating-promises': 'off',
				'@typescript-eslint/no-misused-promises': 'off',
				'@typescript-eslint/require-await': 'off',
				'@typescript-eslint/unbound-method': 'off',
				'@typescript-eslint/no-unsafe-assignment': 'off',
				'@typescript-eslint/no-unsafe-call': 'off',
				'@typescript-eslint/no-unsafe-member-access': 'off',
				'@typescript-eslint/no-unsafe-return': 'off',
				'@typescript-eslint/no-unsafe-argument': 'off',
				'@typescript-eslint/no-var-requires': 'off',
			},
		},
		{
			files: [
				'packages/engine/src/action_perform.ts',
				'packages/engine/src/effects/**/*.ts',
				'packages/engine/src/evaluators/**/*.ts',
				'packages/engine/src/index.ts',
			],
		},
		{
			files: [
				'packages/engine/tests/stat-sources.test.ts',
				'packages/engine/tests/resolveAttack.test.ts',
				'packages/engine/src/stat_sources.ts',
				'packages/engine/src/effects/attack.ts',
				'packages/engine/src/index.ts',
				'packages/contents/src/actions.ts',
				'packages/contents/src/config/builders.ts',
				'packages/web/src/translation/log.ts',
				'packages/web/src/translation/effects/formatters/attack.ts',
				'packages/web/src/utils/stats.ts',
				'packages/web/src/state/GameContext.tsx',
				'packages/web/src/components/actions/ActionsPanel.tsx',
				'packages/engine/src/ai/index.ts',
				'packages/engine/src/context.ts',
				'packages/engine/src/registry.ts',
				'packages/engine/src/services/index.ts',
				'packages/web/src/translation/effects/helpers.ts',
				'packages/web/src/translation/render.tsx',
				'packages/web/src/utils/getRequirementIcons.ts',
				'packages/web/src/utils/useAutoAnimate.ts',
				'packages/engine/src/state/index.ts',
				'packages/engine/src/triggers.ts',
				'packages/engine/src/utils.ts',
				'packages/web/src/components/HoverCard.tsx',
				'packages/web/src/components/LogPanel.tsx',
				'packages/web/src/components/TimerCircle.tsx',
				'packages/web/src/components/actions/ActionCard.tsx',
				'packages/web/src/components/common/TimeControl.tsx',
				'packages/web/src/components/phases/PhasePanel.tsx',
				'packages/web/src/components/player/BuildingDisplay.tsx',
				'packages/web/src/components/player/LandDisplay.tsx',
				'packages/web/src/components/player/PassiveDisplay.tsx',
				'packages/web/src/components/player/PopulationInfo.tsx',
				'packages/web/src/translation/content/action.ts',
				'packages/web/src/translation/content/actionLogHooks.ts',
				'packages/web/src/translation/content/decorators.ts',
				'packages/web/src/translation/content/development.ts',
				'packages/web/src/translation/content/partition.ts',
				'packages/web/src/translation/content/phased.ts',
				'packages/web/src/translation/effects/factory.ts',
				'packages/web/src/translation/effects/formatters/action.ts',
				'packages/web/src/translation/effects/formatters/building.ts',
				'packages/web/src/translation/effects/formatters/passive.ts',
			],
			rules: {
				'max-lines': 'off',
			},
		},
		{
			files: [
				'packages/web/src/utils/stats.ts',
				'packages/web/src/utils/stats/summary.ts',
			],
			rules: {
				'@typescript-eslint/no-unsafe-assignment': 'off',
				'@typescript-eslint/no-unsafe-call': 'off',
				'@typescript-eslint/no-unsafe-member-access': 'off',
				'@typescript-eslint/no-unsafe-return': 'off',
				'@typescript-eslint/no-redundant-type-constituents': 'off',
			},
		},
		{
			files: [
				'packages/contents/src/config/builders/domainBuilders.ts',
				'packages/contents/src/config/builders/evaluators.ts',
				'packages/contents/src/config/builders/startConfig.ts',
				'packages/contents/src/config/builders/tierBuilders.ts',
				'packages/web/tests/generic-actions-effect-group.test.tsx',
				'packages/web/tests/helpers/actionsPanel.ts',
			],
			rules: {
				'no-max-lines-override': 'off',
			},
		},
	],
};
